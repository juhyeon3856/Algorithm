'''
이건 하향식 디피가 더 편할듯

4을 만들기위해서는 3을 만드는 경우의 수 + 1, 2를 만드는 경우의 수 + 2, 1을 만드는 경우의 수 + 3
3 1
1 3
이러면 중복해서 세진다.

4를 만드는 것은
3 0개 사용 -> 1, 2만 이용해서 4를 만들어라 -> 2를 0개, 1개, 2개 사용 -> 나머지는 1로
3 1개 사용 -> 1, 2만 이용해서 1을 만들어라
3 2개 사용 -> 불가능


즉, 3을 사용하는 개수 0 ~ n // 3개
그때마다 2를 사용하는 개수 0 ~ m(m-3*3개수) // 2 개
나머지 1

복잡도 -> n // 3개
'''

####################################################

# 입력
TC = int(input())

ans = [0] * TC
for tc in range(TC):
    n = int(input())
    for c3 in range(n // 3 + 1):  # c3은 3을 사용하는 개수
        m = n - 3 * c3
        ans[tc] += m // 2 + 1

        debug = 0

print(*ans, sep="\n")